package hearthstone.core.cards;

import hearthstone.core.cards.magics.Attachment;
import hearthstone.core.contracts.IAttachable;
import hearthstone.core.contracts.IDamageable;

import java.util.*;

public class Lackey extends SingleHarmful implements IDamageable, IAttachable {

    private final int life;
    private final int maxLife;
    private final Collection<LackeyAttributes> attributes;
    private final Collection<Attachment> attachments;

    public static final Collection<Lackey> DEFAULT_CARDS = Collections.unmodifiableCollection(Arrays.asList(
            new Lackey("Frodo Baggins", 2, 1, 1, Collections.emptyList(), Collections.emptyList()),
            new Lackey("Aragorn", 5, 7, 6, Arrays.asList(LackeyAttributes.PROVOKE), Collections.emptyList()),
            new Lackey("Legolas", 8, 4, 6, Arrays.asList(LackeyAttributes.WIND_FURY), Collections.emptyList()),
            new Lackey("Sauron", 10, 10, 10, Arrays.asList(LackeyAttributes.HASTE, LackeyAttributes.PROVOKE, LackeyAttributes.WIND_FURY), Collections.emptyList())
    ));

    public Lackey(String name, int attack, int life, int manaCost,
                  Collection<LackeyAttributes> attributes,
                  Collection<Attachment> attachments) {
        this(UUID.randomUUID(), name, attack, life, life, manaCost, attributes, attachments);
    }

    public Lackey(UUID id, String name, int attack, int life, int maxLife, int manaCost,
                  Collection<LackeyAttributes> attributes,
                  Collection<Attachment> attachments) {
        super(id, name, attack, manaCost);
        this.life = life;
        this.maxLife = maxLife;
        this.attributes = Collections.unmodifiableCollection(attributes);
        this.attachments = Collections.unmodifiableCollection(attachments);
    }

    @Override
    public IDamageable takeDamage(int damage) {
        return new Lackey(getId(), getName(), getDamage(), life - damage, maxLife,
                getManaCost(), attributes, attachments);
    }

    @Override
    public IAttachable attach(Attachment attachment) {
        ArrayList<Attachment> attachments = new ArrayList<>(this.attachments);
        attachments.add(attachment);

        return new Lackey(getId(), getName(), getDamage(), life, maxLife,
                getManaCost(), attributes, attachments);
    }

    @Override
    public IAttachable detach(Attachment attachment) {
        ArrayList<Attachment> attachments = new ArrayList<>(this.attachments);
        attachments.remove(attachment);

        return new Lackey(getId(), getName(), getDamage(), life, maxLife,
                getManaCost(), attributes, attachments);
    }

    /**
     * @return the base damage plus the increase generated by the attachments.
     */
    @Override
    public int getDamage() {
        return super.getDamage() + attachments.stream()
                .mapToInt(Attachment::getDamageIncrease)
                .sum();
    }

    @Override
    public int getLife() {
        return life + attachments.stream()
                .mapToInt(Attachment::getLifeIncrease)
                .sum();
    }

    @Override
    public int getMaxLife() {
        return maxLife + attachments.stream()
                .mapToInt(Attachment::getLifeIncrease)
                .sum();
    }

    public Collection<LackeyAttributes> getAttributes() {
        return attributes;
    }

    @Override
    public String toString() {
        return (life == maxLife
                ? String.format("%s (atk %d/def %d)", super.toString(), getDamage(), life)
                : String.format("%s (atk %d/def %d from %d)", super.toString(), getDamage(), life, maxLife))
                + (attributes.isEmpty()
                ? String.format(" {%s}", attributes)
                : "");
    }
}
